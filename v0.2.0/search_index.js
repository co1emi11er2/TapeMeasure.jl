var documenterSearchIndex = {"docs":
[{"location":"details/#Details","page":"Details","title":"Details","text":"","category":"section"},{"location":"details/","page":"Details","title":"Details","text":"The goal of this package is to be able to get measurements for objects (geometric shapes) as well as plot dimensions. Currently, objects are defined differently depending on the package. Plots, for instance, takes objects in the form of two separate x and y vectors, while Makie uses Polygon objects. The Meshes.jl package uses Ngon objects. Makie Polygon objects currently do not support unitful, so still debating on the best approach there. ","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"The short term goals are:","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"Feature parity with both Makie.jl and Plots.jl\nSensible API for the package\nMeshes.jl integration\nMeasurements for radius or diameter of a circle \nAngle Measurements","category":"page"},{"location":"details/#Current-Capabilities","page":"Details","title":"Current Capabilities","text":"","category":"section"},{"location":"details/","page":"Details","title":"Details","text":"There are two main use cases for TapeMeasure currently. One use case is for objects and the other is for a single object. The term object here is specifically for a set of points that define a polygon.","category":"page"},{"location":"details/#Multiple-Objects","page":"Details","title":"Multiple Objects","text":"","category":"section"},{"location":"details/","page":"Details","title":"Details","text":"When dealing with a set of objects, there are two main functions currently.","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"h_dim\nv_dim","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"These functions will calculate the middle of the each object. This is trivial currently. It is just finding the middle point of the xs and ys of each object (using the middle function from the Statistics package), and then it determines either the horizontal or vertical spacing between the middles of each object. The function will then return a TopDimensions or BottomDimensions object or a LeftDimensions or RightDimensions object that can then be plotted in Plots.jl and Makie.jl. The user can provide an keyword offset value to the functions to change the location of where the dimension will be plotted.","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"using TapeMeasure\nusing Plots\nusing Unitful\n\nconst ft = u\"ft\"\n\n# Define a few objects consisting of x and y coordinates\n x = [\n     [2.5ft, 2.5ft, 3.7083333329999997ft, 3.7083333329999997ft, 2.666666667ft, 2.666666667ft, 5.333333333000001ft, 5.333333333000001ft, 4.291666667ft, 4.291666667ft, 5.5ft, 5.5ft, 2.5ft],\n     [10.5ft, 10.5ft, 11.708333333ft, 11.708333333ft, 10.666666667ft, 10.666666667ft, 13.333333333ft, 13.333333333ft, 12.291666667ft, 12.291666667ft, 13.5ft, 13.5ft, 10.5ft],\n     [18.5ft, 18.5ft, 19.708333333ft, 19.708333333ft, 18.666666667ft, 18.666666667ft, 21.333333333ft, 21.333333333ft, 20.291666667ft, 20.291666667ft, 21.5ft, 21.5ft, 18.5ft],\n     [26.5ft, 26.5ft, 27.708333333ft, 27.708333333ft, 26.666666667ft, 26.666666667ft, 29.333333333ft, 29.333333333ft, 28.291666667ft, 28.291666667ft, 29.5ft, 29.5ft, 26.5ft],\n     [34.5ft, 34.5ft, 35.708333333ft, 35.708333333ft, 34.666666667ft, 34.666666667ft, 37.333333333ft, 37.333333333ft, 36.291666667ft, 36.291666667ft, 37.5ft, 37.5ft, 34.5ft]\n ]\n\ny = [\n    [-0.25ft, -0.541666667ft, -0.875ft, -3.375ft, -4.020833333000001ft, -4.75ft, -4.75ft, -4.020833333000001ft, -3.375ft, -0.875ft, -0.541666667ft, -0.25ft, -0.25ft],\n    [-0.25ft, -0.541666667ft, -0.875ft, -3.375ft, -4.020833333000001ft, -4.75ft, -4.75ft, -4.020833333000001ft, -3.375ft, -0.875ft, -0.541666667ft, -0.25ft, -0.25ft],\n    [-0.25ft, -0.541666667ft, -0.875ft, -3.375ft, -4.020833333000001ft, -4.75ft, -4.75ft, -4.020833333000001ft, -3.375ft, -0.875ft, -0.541666667ft, -0.25ft, -0.25ft],\n    [-0.25ft, -0.541666667ft, -0.875ft, -3.375ft, -4.020833333000001ft, -4.75ft, -4.75ft, -4.020833333000001ft, -3.375ft, -0.875ft, -0.541666667ft, -0.25ft, -0.25ft],\n    [-0.25ft, -0.541666667ft, -0.875ft, -3.375ft, -4.020833333000001ft, -4.75ft, -4.75ft, -4.020833333000001ft, -3.375ft, -0.875ft, -0.541666667ft, -0.25ft, -0.25ft]\n]","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"Continuing the example from the Home page","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"# lets add some vertical spacing between each object as well\nfor (i, ys) in enumerate(y)\n    y[i] = ys .+ (5*i)*ft\nend\n\ndims = h_dim(x, y, offset=3ft)\n\nplot(x, y, seriestype=:shape, color=:lightgrey, legend=false, aspectratio=1)\nplot!(dims)","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"dims = v_dim(x, y, offset=-3ft)\n\nplot(x, y, seriestype=:shape, color=:lightgrey, legend=false, aspectratio=1)\nplot!(dims)","category":"page"},{"location":"details/#Single-Object","page":"Details","title":"Single Object","text":"","category":"section"},{"location":"details/","page":"Details","title":"Details","text":"When dealing with a single object, there are four main functions currently.","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"dim_top\ndim_bottom\ndim_left\ndim_right","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"These functions attempt to calculate the dimensions of the respective side of the object. These functions are really for rectangular/symetric type objects. The current implementation is limited. The user can provide an keyword offset value to the functions to change the location of where the dimension will be plotted. See example below.","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"top = dim_top(x[1], y[1], offset=1ft)\nbottom = dim_bottom(x[1], y[1])\nleft = dim_left(x[1], y[1])\nright = dim_right(x[1], y[1])\n\nplot(x[1], y[1], seriestype=:shape, color=:lightgrey, legend=false, aspectratio=1)\nplot!(top)\nplot!(bottom)\nplot!(left)\nplot!(right)","category":"page"},{"location":"details/","page":"Details","title":"Details","text":"You can see from the plot that the bottom dimension is finding the dimension of the max overall width and not the relative width at the bottom.","category":"page"},{"location":"plots/#Working-with-Plots.jl","page":"Working with Plots.jl","title":"Working with Plots.jl","text":"","category":"section"},{"location":"plots/","page":"Working with Plots.jl","title":"Working with Plots.jl","text":"TapeMeasure.jl provides an extension that loads when the user calls using Plots in their code.","category":"page"},{"location":"plots/#Changing-Plot-Settings:","page":"Working with Plots.jl","title":"Changing Plot Settings:","text":"","category":"section"},{"location":"plots/","page":"Working with Plots.jl","title":"Working with Plots.jl","text":"You can change the plot settings using the following keyword arguments.","category":"page"},{"location":"plots/#Settings","page":"Working with Plots.jl","title":"Settings","text":"","category":"section"},{"location":"plots/","page":"Working with Plots.jl","title":"Working with Plots.jl","text":"dim_color::Symbol - changes the color of the dimension lines as well as the labels\nwith_mask::Bool - the label will not \"mask\" over the dimension line\nfont_size - changes the size of the label font\ntext_rotation - degree of rotation for the label","category":"page"},{"location":"plots/","page":"Working with Plots.jl","title":"Working with Plots.jl","text":"See below for examples:","category":"page"},{"location":"plots/#Examples","page":"Working with Plots.jl","title":"Examples","text":"","category":"section"},{"location":"plots/","page":"Working with Plots.jl","title":"Working with Plots.jl","text":"using TapeMeasure\nusing Plots\nusing Unitful\n\nconst ft = u\"ft\"\n\n# Define a few objects consisting of x and y coordinates\n x = [\n     [2.5ft, 2.5ft, 3.7083333329999997ft, 3.7083333329999997ft, 2.666666667ft, 2.666666667ft, 5.333333333000001ft, 5.333333333000001ft, 4.291666667ft, 4.291666667ft, 5.5ft, 5.5ft, 2.5ft],\n     [10.5ft, 10.5ft, 11.708333333ft, 11.708333333ft, 10.666666667ft, 10.666666667ft, 13.333333333ft, 13.333333333ft, 12.291666667ft, 12.291666667ft, 13.5ft, 13.5ft, 10.5ft],\n     [18.5ft, 18.5ft, 19.708333333ft, 19.708333333ft, 18.666666667ft, 18.666666667ft, 21.333333333ft, 21.333333333ft, 20.291666667ft, 20.291666667ft, 21.5ft, 21.5ft, 18.5ft],\n     [26.5ft, 26.5ft, 27.708333333ft, 27.708333333ft, 26.666666667ft, 26.666666667ft, 29.333333333ft, 29.333333333ft, 28.291666667ft, 28.291666667ft, 29.5ft, 29.5ft, 26.5ft],\n     [34.5ft, 34.5ft, 35.708333333ft, 35.708333333ft, 34.666666667ft, 34.666666667ft, 37.333333333ft, 37.333333333ft, 36.291666667ft, 36.291666667ft, 37.5ft, 37.5ft, 34.5ft]\n ]\n\ny = [\n    [-0.25ft, -0.541666667ft, -0.875ft, -3.375ft, -4.020833333000001ft, -4.75ft, -4.75ft, -4.020833333000001ft, -3.375ft, -0.875ft, -0.541666667ft, -0.25ft, -0.25ft],\n    [-0.25ft, -0.541666667ft, -0.875ft, -3.375ft, -4.020833333000001ft, -4.75ft, -4.75ft, -4.020833333000001ft, -3.375ft, -0.875ft, -0.541666667ft, -0.25ft, -0.25ft],\n    [-0.25ft, -0.541666667ft, -0.875ft, -3.375ft, -4.020833333000001ft, -4.75ft, -4.75ft, -4.020833333000001ft, -3.375ft, -0.875ft, -0.541666667ft, -0.25ft, -0.25ft],\n    [-0.25ft, -0.541666667ft, -0.875ft, -3.375ft, -4.020833333000001ft, -4.75ft, -4.75ft, -4.020833333000001ft, -3.375ft, -0.875ft, -0.541666667ft, -0.25ft, -0.25ft],\n    [-0.25ft, -0.541666667ft, -0.875ft, -3.375ft, -4.020833333000001ft, -4.75ft, -4.75ft, -4.020833333000001ft, -3.375ft, -0.875ft, -0.541666667ft, -0.25ft, -0.25ft]\n]","category":"page"},{"location":"plots/","page":"Working with Plots.jl","title":"Working with Plots.jl","text":"dims = h_dim(x, y)\n\nplot(x, y, seriestype=:shape, color=:lightgrey, legend=false, aspectratio=1)\nplot!(dims, dim_color=:blue, with_mask=false, font_size=8)","category":"page"},{"location":"plots/","page":"Working with Plots.jl","title":"Working with Plots.jl","text":"dims = v_dim(y, x)\n\nplot(y, x, seriestype=:shape, color=:lightgrey, legend=false, aspectratio=1)\nplot!(dims, dim_color=:blue, text_rotation=0)","category":"page"},{"location":"makie/#Working-with-Makie.jl","page":"Working with Makie","title":"Working with Makie.jl","text":"","category":"section"},{"location":"makie/","page":"Working with Makie","title":"Working with Makie","text":"TapeMeasure.jl provides an extension that loads when the user calls using Makie, using CairoMakie, or other makie package in their code.","category":"page"},{"location":"makie/#Changing-Plot-Settings:","page":"Working with Makie","title":"Changing Plot Settings:","text":"","category":"section"},{"location":"makie/","page":"Working with Makie","title":"Working with Makie","text":"You can change the plot settings using the following keyword arguments.","category":"page"},{"location":"makie/#Settings","page":"Working with Makie","title":"Settings","text":"","category":"section"},{"location":"makie/","page":"Working with Makie","title":"Working with Makie","text":"color::Symbol - changes the color of the dimension lines as well as the labels\nwith_mask::Bool - the label will not \"mask\" over the dimension line\nlinewidth - the line width of the dimension lines\nfontsize - the size of the label font\nrotation - radians of rotation for the label","category":"page"},{"location":"makie/","page":"Working with Makie","title":"Working with Makie","text":"The keywords are a bit different from Plots.jl in order to be more consistent with Makie ecosystem, but that may change if it is an issue for users. See below for examples:","category":"page"},{"location":"makie/#Examples","page":"Working with Makie","title":"Examples","text":"","category":"section"},{"location":"makie/","page":"Working with Makie","title":"Working with Makie","text":"using TapeMeasure\nusing CairoMakie\nusing Unitful\n\nconst ft = u\"ft\"\n\n# Define a few objects consisting of x and y coordinates\n x = [\n     [2.5ft, 2.5ft, 3.7083333329999997ft, 3.7083333329999997ft, 2.666666667ft, 2.666666667ft, 5.333333333000001ft, 5.333333333000001ft, 4.291666667ft, 4.291666667ft, 5.5ft, 5.5ft, 2.5ft],\n     [10.5ft, 10.5ft, 11.708333333ft, 11.708333333ft, 10.666666667ft, 10.666666667ft, 13.333333333ft, 13.333333333ft, 12.291666667ft, 12.291666667ft, 13.5ft, 13.5ft, 10.5ft],\n     [18.5ft, 18.5ft, 19.708333333ft, 19.708333333ft, 18.666666667ft, 18.666666667ft, 21.333333333ft, 21.333333333ft, 20.291666667ft, 20.291666667ft, 21.5ft, 21.5ft, 18.5ft],\n     [26.5ft, 26.5ft, 27.708333333ft, 27.708333333ft, 26.666666667ft, 26.666666667ft, 29.333333333ft, 29.333333333ft, 28.291666667ft, 28.291666667ft, 29.5ft, 29.5ft, 26.5ft],\n     [34.5ft, 34.5ft, 35.708333333ft, 35.708333333ft, 34.666666667ft, 34.666666667ft, 37.333333333ft, 37.333333333ft, 36.291666667ft, 36.291666667ft, 37.5ft, 37.5ft, 34.5ft]\n ]\n\ny = [\n    [-0.25ft, -0.541666667ft, -0.875ft, -3.375ft, -4.020833333000001ft, -4.75ft, -4.75ft, -4.020833333000001ft, -3.375ft, -0.875ft, -0.541666667ft, -0.25ft, -0.25ft],\n    [-0.25ft, -0.541666667ft, -0.875ft, -3.375ft, -4.020833333000001ft, -4.75ft, -4.75ft, -4.020833333000001ft, -3.375ft, -0.875ft, -0.541666667ft, -0.25ft, -0.25ft],\n    [-0.25ft, -0.541666667ft, -0.875ft, -3.375ft, -4.020833333000001ft, -4.75ft, -4.75ft, -4.020833333000001ft, -3.375ft, -0.875ft, -0.541666667ft, -0.25ft, -0.25ft],\n    [-0.25ft, -0.541666667ft, -0.875ft, -3.375ft, -4.020833333000001ft, -4.75ft, -4.75ft, -4.020833333000001ft, -3.375ft, -0.875ft, -0.541666667ft, -0.25ft, -0.25ft],\n    [-0.25ft, -0.541666667ft, -0.875ft, -3.375ft, -4.020833333000001ft, -4.75ft, -4.75ft, -4.020833333000001ft, -3.375ft, -0.875ft, -0.541666667ft, -0.25ft, -0.25ft]\n]\n\nuc = Makie.UnitfulConversion(ft)","category":"page"},{"location":"makie/","page":"Working with Makie","title":"Working with Makie","text":"dims = h_dim(x, y)\n\nf = Figure()\nax = Axis(f[1,1], autolimitaspect=1, dim1_conversion=uc, dim2_conversion=uc)\nlines!.(ax, x, y, color=:lightgrey)\nplot!(ax, dims, color=:blue, with_mask=false, fontsize = 10)\nf","category":"page"},{"location":"makie/","page":"Working with Makie","title":"Working with Makie","text":"dims = v_dim(y, x)\n\nf = Figure()\nax = Axis(f[1,1], autolimitaspect=1, dim1_conversion=uc, dim2_conversion=uc)\nlines!.(ax, y, x, color=:lightgrey)\nplot!(ax, dims, rotation = 0)\nf","category":"page"},{"location":"reference/#References","page":"Reference","title":"References","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [TapeMeasure]","category":"page"},{"location":"reference/#TapeMeasure.HDimensions","page":"Reference","title":"TapeMeasure.HDimensions","text":"mutable struct HDimensions{T, S}\n\nA mutable struct representing the horizontal dimensions for an object that can be shown on a plot using Plots.jl or Makie.jl.\n\nFields\n\nxs::Vector{T}: A vector containing the x-coordinates.\nys::Vector{S}: A vector containing the y-coordinates.\nlabels::Labels{T, S}: An instance of Labels containing labels for the x and y coordinates.\nminor_lines::Vector{S}: A vector containing the positions of minor grid lines.\nmajor_lines::Vector{S}: A vector containing the positions of major grid lines.\noffset::T: Stores the offset value of the dimension\n\nType Parameters\n\nT: The type of the elements in the xs vector.\nS: The type of the elements in the ys, minor_lines, major_lines vectors, and offset value.\n\n\n\n\n\n","category":"type"},{"location":"reference/#TapeMeasure.Labels","page":"Reference","title":"TapeMeasure.Labels","text":"mutable struct Labels{T, S}\n\nA structure to hold labeled information for dimensions object.\n\nFields\n\nxs::Vector{T}: A vector of x-coordinates of type T.\nys::Vector{S}: A vector of y-coordinates of type S.\nlbls::Vector{String}: A vector of labels corresponding to the data points.\n\n\n\n\n\n","category":"type"},{"location":"reference/#TapeMeasure.VDimensions","page":"Reference","title":"TapeMeasure.VDimensions","text":"mutable struct VDimensions{T, S}\n\nA mutable struct representing the right dimensions for an object that can be shown on a plot using Plots.jl or Makie.jl.\n\nFields\n\nxs::Vector{T}: A vector containing the x-coordinates.\nys::Vector{S}: A vector containing the y-coordinates.\nlabels::Labels{T, S}: An instance of Labels containing labels for the x and y coordinates.\nminor_lines::Vector{T}: A vector containing the positions of minor extension lines.\nmajor_lines::Vector{T}: A vector containing the positions of major extension lines.\noffset::T: Stores the offset value of the dimension\n\nType Parameters\n\nT: The type of the elements in the xs, minor_lines, major_lines vectors and offset value.\nS: The type of the elements in the ys vector.\n\n\n\n\n\n","category":"type"},{"location":"reference/#TapeMeasure._dimensions-Union{Tuple{T}, Tuple{S}, Tuple{Array{Vector{T}, 1}, Array{Vector{S}, 1}}} where {S, T}","page":"Reference","title":"TapeMeasure._dimensions","text":"dimensions(\nxs::Vector{Vector{T}},\nys::Vector{Vector{S}};\n) where T where S\n\nFinds the dimensions of a horizontally spaced set of objects with points xs and ys. Each vector in xs and ys represents a new object.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TapeMeasure._find_midpoints-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"Reference","title":"TapeMeasure._find_midpoints","text":"find_midpoints(xs::AbstractVector{T}) where T\n\nCompute the midpoints of a vector xs, which consists of computing the average between adjacent values in the vector.\n\nExample\n\njulia> a = [10; 20; 30; 40; 50]\n5-element Vector{Int64}:\n 10\n 20\n 30\n 40\n 50\n\njulia> find_midpoints(a)\n4-element Vector{Int64}:\n 15\n 25\n 35\n 45\n\n\n\n\n\n\n","category":"method"},{"location":"reference/#TapeMeasure._find_spacing-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"Reference","title":"TapeMeasure._find_spacing","text":"find_spacing(xs::AbstractVector{T}) where T\n\nCompute the spacing of a vector xs, which consists of computing the difference between adjacent values in the vector.\n\nExample\n\njulia> a = [1; 3; 7; 20; 30]\n5-element Vector{Int64}:\n  1\n  3\n  7\n 20\n 30\n\njulia> find_spacing(a)\n4-element Vector{Int64}:\n  2\n  4\n 13\n 10\n\n\n\n\n\n\n","category":"method"},{"location":"reference/#TapeMeasure._find_theta-Tuple{Any, Any}","page":"Reference","title":"TapeMeasure._find_theta","text":"find_theta(xs, ys)\n\nNot implemented.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TapeMeasure._get_major_minor_lines-Union{Tuple{T}, Tuple{Any, T}} where T","page":"Reference","title":"TapeMeasure._get_major_minor_lines","text":"get_major_minor_lines(x_or_y_dims, offset::T) where T\n\n\n\n\n\n","category":"method"},{"location":"reference/#TapeMeasure.dim_bottom-Union{Tuple{S}, Tuple{T}, Tuple{Vector{T}, Vector{S}}} where {T, S}","page":"Reference","title":"TapeMeasure.dim_bottom","text":"dim_bottom(xs::Vector{T}, ys::Vector{S}; offset::S=0) -> Union{TopDimensions, BottomDimensions}\ndim_bottom(object::Vector{Tuple{T, S}}; offset=zero(S)) where {T, S}\n\nComputes the bottom dimension for a given set of x and y coordinates of an object.\n\nArguments\n\nxs::Vector{T}: A vector of x coordinates.\nys::Vector{S}: A vector of y coordinates.\noffset: An optional offset value of type S. Defaults to zero.\n\nReturns\n\nHDimensions object containing:\nx_dims: The calculated x-dimensions.\ny_dims: The adjusted y-dimensions.\nlabels: The dimension labels.\nminor_lines: The minor lines for the dimensions.\nmajor_lines: The major lines for the dimensions.\noffset: offset from reference objects\n\nIf the offset is not provided, it is set to 10% of the range of x coordinates. The function then computes  the x and y dimensions, major and minor lines, and labels, and returns the  appropriate dimensions object based on the offset value.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TapeMeasure.dim_left-Union{Tuple{S}, Tuple{T}, Tuple{Vector{T}, Vector{S}}} where {T, S}","page":"Reference","title":"TapeMeasure.dim_left","text":"dim_left(xs::Vector{T}, ys::Vector{S}; offset::S=0) -> Union{RightDimensions, LeftDimensions}\ndim_left(object::Vector{Tuple{T, S}}; offset=zero(T)) where {T, S}\n\nComputes the left dimensions of a given set of x and y coordinates of an object.\n\nArguments\n\nxs::Vector{T}: A vector of x coordinates.\nys::Vector{S}: A vector of y coordinates.\noffset: An optional offset value of type S. Defaults to zero.\n\nReturns\n\nVDimensions object containing:\nx_dims: The x dimensions adjusted by the offset.\ny_dims: The y dimensions.\nlabels: The dimension labels.\nminor_lines: The minor lines for the dimensions.\nmajor_lines: The major lines for the dimensions.\noffset: offset from reference objects\n\nIf the offset is not provided, it is set to 10% of the range of x coordinates. The function then computes  the x and y dimensions, major and minor lines, and labels, and returns the  appropriate dimensions object based on the offset value.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TapeMeasure.dim_right-Union{Tuple{S}, Tuple{T}, Tuple{Vector{T}, Vector{S}}} where {T, S}","page":"Reference","title":"TapeMeasure.dim_right","text":"dim_right(xs::Vector{T}, ys::Vector{S}; offset::S=0) -> Union{RightDimensions, LeftDimensions}\ndim_right(object::Vector{Tuple{T, S}}; offset=zero(T)) where {T, S}\n\nComputes the right dimension of a given set of x and y coordinates of an object.\n\nArguments\n\nxs::Vector{T}: A vector of x coordinates.\nys::Vector{S}: A vector of y coordinates.\noffset: An optional offset value of type S. Defaults to zero.\n\nReturns\n\nVDimensions object containing:\nx_dims: The x dimensions adjusted by the offset.\ny_dims: The y dimensions.\nlabels: The dimension labels.\nminor_lines: The minor lines for the dimensions.\nmajor_lines: The major lines for the dimensions.\noffset: offset from reference objects\n\nIf the offset is not provided, it is set to 10% of the range of x coordinates. The function then computes  the x and y dimensions, major and minor lines, and labels, and returns the  appropriate dimensions object based on the offset value.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TapeMeasure.dim_top-Union{Tuple{S}, Tuple{T}, Tuple{Vector{T}, Vector{S}}} where {T, S}","page":"Reference","title":"TapeMeasure.dim_top","text":"dim_top(xs::Vector{T}, ys::Vector{S}; offset::S=0) -> Union{TopDimensions, BottomDimensions}\ndim_top(object::Vector{Tuple{T, S}}; offset=zero(S)) where {T, S}\n\nComputes the top dimensions for a given set of x and y coordinates of an object.\n\nArguments\n\nxs::Vector{T}: A vector of x coordinates.\nys::Vector{S}: A vector of y coordinates.\noffset: An optional offset value of type S. Defaults to zero.\n\nReturns\n\nHDimensions object containing:\nx_dims: The calculated x-dimensions.\ny_dims: The adjusted y-dimensions.\nlabels: The dimension labels.\nminor_lines: The minor lines for the dimensions.\nmajor_lines: The major lines for the dimensions.\noffset: offset from reference objects\n\nIf the offset is not provided, it is set to 10% of the range of x coordinates. The function then computes  the x and y dimensions, major and minor lines, and labels, and returns the  appropriate dimensions object based on the offset value.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TapeMeasure.h_dim-Union{Tuple{Array{Array{Tuple{T, S}, 1}, 1}}, Tuple{S}, Tuple{T}} where {T, S}","page":"Reference","title":"TapeMeasure.h_dim","text":"h_dim(objects::Vector{Vector{Tuple{T, S}}}; offset = zero(S)) where {T, S}\n\nCalculate the horizontal dimension of a collection of objects.\n\nArguments\n\nobjects::Vector{Vector{Tuple{T, S}}}: A vector of vectors, where each inner vector contains tuples of type (T, S).\noffset: An optional offset value of type S. Defaults to zero(S).\n\nReturns\n\nHDimensions object containing:\nx_dims: The calculated x-dimensions.\ny_dims: The adjusted y-dimensions.\nlabels: The dimension labels.\nminor_lines: The minor lines for the dimensions.\nmajor_lines: The major lines for the dimensions.\noffset: offset from reference objects\n\n\n\n\n\n","category":"method"},{"location":"reference/#TapeMeasure.h_dim-Union{Tuple{S}, Tuple{T}, Tuple{Array{Vector{T}, 1}, Array{Vector{S}, 1}}} where {T, S}","page":"Reference","title":"TapeMeasure.h_dim","text":"h_dim(xs::Vector{Vector{T}}, ys::Vector{Vector{S}}; offset = zero(S)) where {T, S}\n\nThis function calculates the horizontal dimensions based on the input vectors xs and ys.\n\nArguments\n\nxs::Vector{Vector{T}}: A vector of vectors containing the x-coordinates.\nys::Vector{Vector{S}}: A vector of vectors containing the y-coordinates.\noffset: An optional parameter with a default value of zero(S), used to adjust the y-dimensions.\n\nReturns\n\nHDimensions object containing:\nx_dims: The calculated x-dimensions.\ny_dims: The adjusted y-dimensions.\nlabels: The dimension labels.\nminor_lines: The minor lines for the dimensions.\nmajor_lines: The major lines for the dimensions.\noffset: offset from reference objects\n\n\n\n\n\n","category":"method"},{"location":"reference/#TapeMeasure.v_dim-Union{Tuple{Array{Array{Tuple{T, S}, 1}, 1}}, Tuple{S}, Tuple{T}} where {T, S}","page":"Reference","title":"TapeMeasure.v_dim","text":"v_dim(objects::Vector{Vector{Tuple{T, S}}}; offset = zero(S)) where {T, S}\n\nCalculate the vertical dimension of a collection of objects.\n\nArguments\n\nobjects::Vector{Vector{Tuple{T, S}}}: A vector of vectors, where each inner vector contains tuples of type (T, S).\noffset: An optional offset value of type S. Defaults to zero(S).\n\nReturns\n\nVDimensions object containing:\nx_dims: The x dimensions adjusted by the offset.\ny_dims: The y dimensions.\nlabels: The dimension labels.\nminor_lines: The minor lines for the dimensions.\nmajor_lines: The major lines for the dimensions.\noffset: offset from reference objects\n\n\n\n\n\n","category":"method"},{"location":"reference/#TapeMeasure.v_dim-Union{Tuple{S}, Tuple{T}, Tuple{Array{Vector{T}, 1}, Array{Vector{S}, 1}}} where {T, S}","page":"Reference","title":"TapeMeasure.v_dim","text":"v_dim(xs::Vector{Vector{T}}, ys::Vector{Vector{S}}; offset = zero(T)) where {T, S}\n\nCalculate the vertical dimensions for a given set of x and y coordinates.\n\nArguments\n\nxs::Vector{Vector{T}}: A vector of vectors containing the x coordinates.\nys::Vector{Vector{S}}: A vector of vectors containing the y coordinates.\noffset: An optional parameter with a default value of zero(S), used to adjust the x-dimensions.\n\nReturns\n\nVDimensions object containing:\nx_dims: The x dimensions adjusted by the offset.\ny_dims: The y dimensions.\nlabels: The dimension labels.\nminor_lines: The minor lines for the dimensions.\nmajor_lines: The major lines for the dimensions.\noffset: offset from reference objects\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = TapeMeasure","category":"page"},{"location":"#TapeMeasure.jl","page":"Home","title":"TapeMeasure.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<img src=\"./assets/large-logo.svg\" />","category":"page"},{"location":"","page":"Home","title":"Home","text":"TapeMeasure.jl is a Julia package for handling physical dimensions and units in scientific computing. It provides a robust framework for defining, converting, and manipulating dimensions.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install TapeMeasure.jl, use the Julia package manager:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"TapeMeasure\")","category":"page"},{"location":"#Basic-Usage","page":"Home","title":"Basic Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Here's a basic example of how to use TapeMeasure.jl:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using TapeMeasure\nusing Plots\nusing Unitful\n\nconst ft = u\"ft\"\n\n# Define a few objects consisting of x and y coordinates\n x = [\n     [2.5ft, 2.5ft, 3.7083333329999997ft, 3.7083333329999997ft, 2.666666667ft, 2.666666667ft, 5.333333333000001ft, 5.333333333000001ft, 4.291666667ft, 4.291666667ft, 5.5ft, 5.5ft, 2.5ft],\n     [10.5ft, 10.5ft, 11.708333333ft, 11.708333333ft, 10.666666667ft, 10.666666667ft, 13.333333333ft, 13.333333333ft, 12.291666667ft, 12.291666667ft, 13.5ft, 13.5ft, 10.5ft],\n     [18.5ft, 18.5ft, 19.708333333ft, 19.708333333ft, 18.666666667ft, 18.666666667ft, 21.333333333ft, 21.333333333ft, 20.291666667ft, 20.291666667ft, 21.5ft, 21.5ft, 18.5ft],\n     [26.5ft, 26.5ft, 27.708333333ft, 27.708333333ft, 26.666666667ft, 26.666666667ft, 29.333333333ft, 29.333333333ft, 28.291666667ft, 28.291666667ft, 29.5ft, 29.5ft, 26.5ft],\n     [34.5ft, 34.5ft, 35.708333333ft, 35.708333333ft, 34.666666667ft, 34.666666667ft, 37.333333333ft, 37.333333333ft, 36.291666667ft, 36.291666667ft, 37.5ft, 37.5ft, 34.5ft]\n ]\n\ny = [\n    [-0.25ft, -0.541666667ft, -0.875ft, -3.375ft, -4.020833333000001ft, -4.75ft, -4.75ft, -4.020833333000001ft, -3.375ft, -0.875ft, -0.541666667ft, -0.25ft, -0.25ft],\n    [-0.25ft, -0.541666667ft, -0.875ft, -3.375ft, -4.020833333000001ft, -4.75ft, -4.75ft, -4.020833333000001ft, -3.375ft, -0.875ft, -0.541666667ft, -0.25ft, -0.25ft],\n    [-0.25ft, -0.541666667ft, -0.875ft, -3.375ft, -4.020833333000001ft, -4.75ft, -4.75ft, -4.020833333000001ft, -3.375ft, -0.875ft, -0.541666667ft, -0.25ft, -0.25ft],\n    [-0.25ft, -0.541666667ft, -0.875ft, -3.375ft, -4.020833333000001ft, -4.75ft, -4.75ft, -4.020833333000001ft, -3.375ft, -0.875ft, -0.541666667ft, -0.25ft, -0.25ft],\n    [-0.25ft, -0.541666667ft, -0.875ft, -3.375ft, -4.020833333000001ft, -4.75ft, -4.75ft, -4.020833333000001ft, -3.375ft, -0.875ft, -0.541666667ft, -0.25ft, -0.25ft]\n]\n\ndims = h_dim(x, y)\n\nplot(x, y, seriestype=:shape, color=:lightgrey, legend=false, aspectratio=1)\nplot!(dims)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Can work similarly with Makie","category":"page"},{"location":"","page":"Home","title":"Home","text":"using TapeMeasure\nusing CairoMakie\nusing Unitful\n\nconst ft = u\"ft\"\nuc = Makie.UnitfulConversion(ft)\n\n# Define a few objects consisting of x and y coordinates\n x = [\n     [2.5ft, 2.5ft, 3.7083333329999997ft, 3.7083333329999997ft, 2.666666667ft, 2.666666667ft, 5.333333333000001ft, 5.333333333000001ft, 4.291666667ft, 4.291666667ft, 5.5ft, 5.5ft, 2.5ft],\n     [10.5ft, 10.5ft, 11.708333333ft, 11.708333333ft, 10.666666667ft, 10.666666667ft, 13.333333333ft, 13.333333333ft, 12.291666667ft, 12.291666667ft, 13.5ft, 13.5ft, 10.5ft],\n     [18.5ft, 18.5ft, 19.708333333ft, 19.708333333ft, 18.666666667ft, 18.666666667ft, 21.333333333ft, 21.333333333ft, 20.291666667ft, 20.291666667ft, 21.5ft, 21.5ft, 18.5ft],\n     [26.5ft, 26.5ft, 27.708333333ft, 27.708333333ft, 26.666666667ft, 26.666666667ft, 29.333333333ft, 29.333333333ft, 28.291666667ft, 28.291666667ft, 29.5ft, 29.5ft, 26.5ft],\n     [34.5ft, 34.5ft, 35.708333333ft, 35.708333333ft, 34.666666667ft, 34.666666667ft, 37.333333333ft, 37.333333333ft, 36.291666667ft, 36.291666667ft, 37.5ft, 37.5ft, 34.5ft]\n ]\n\ny = [\n    [-0.25ft, -0.541666667ft, -0.875ft, -3.375ft, -4.020833333000001ft, -4.75ft, -4.75ft, -4.020833333000001ft, -3.375ft, -0.875ft, -0.541666667ft, -0.25ft, -0.25ft],\n    [-0.25ft, -0.541666667ft, -0.875ft, -3.375ft, -4.020833333000001ft, -4.75ft, -4.75ft, -4.020833333000001ft, -3.375ft, -0.875ft, -0.541666667ft, -0.25ft, -0.25ft],\n    [-0.25ft, -0.541666667ft, -0.875ft, -3.375ft, -4.020833333000001ft, -4.75ft, -4.75ft, -4.020833333000001ft, -3.375ft, -0.875ft, -0.541666667ft, -0.25ft, -0.25ft],\n    [-0.25ft, -0.541666667ft, -0.875ft, -3.375ft, -4.020833333000001ft, -4.75ft, -4.75ft, -4.020833333000001ft, -3.375ft, -0.875ft, -0.541666667ft, -0.25ft, -0.25ft],\n    [-0.25ft, -0.541666667ft, -0.875ft, -3.375ft, -4.020833333000001ft, -4.75ft, -4.75ft, -4.020833333000001ft, -3.375ft, -0.875ft, -0.541666667ft, -0.25ft, -0.25ft]\n]\n\ndims = h_dim(x, y)\n\nf = Figure()\nax = Axis(f[1,1], autolimitaspect=1, dim1_conversion=uc, dim2_conversion=uc)\nlines!.(ax, x, y, color=:lightgrey)\nplot!(ax, dims)\nf","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Makes dimensioning easy\nWorks with Unitful\nDimensional consistency checks\nHope to integrate with Meshes ecosystem","category":"page"},{"location":"#Contributing","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Contributions are welcome! Please open an issue or submit a pull request on GitHub.","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This project is licensed under the MIT License.","category":"page"},{"location":"#Acknowledgements","page":"Home","title":"Acknowledgements","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Thanks to the Julia community and the amazing Plots and Makie packages.","category":"page"}]
}
